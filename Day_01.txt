Q1

public class Day_01 {
    public static void main(String[] args) {
        int a = 24, b = 0, c;
        System.out.println("Start Main");
        c = a/b;
        System.out.println("End Main");
    }    
}

Start Main
Exception in thread "main" java.lang.ArithmeticException: / by zero
        at Day_01.main(Day_01.java:5)

Q2

public class Demo {
    public static void main(String[] args) {
        int a = 3, b = 0, c;
        int[] ar = new int[3];
        System.out.println("Start Main");
        ar[a] = 100;
        System.out.println("End Main");
    }    
}

Start Main
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3
        at Demo.main(Demo.java:6)

Q3

public class Demo {
    public static void main(String[] args) {
        int a = 5;
        String name = "kamal";
        char ch;
        
        System.out.println("Start Main");
        ch = name.charAt(a);
        System.out.println("End Main");
    }    
}

Start Main
Exception in thread "main" java.lang.StringIndexOutOfBoundsException: String index out of range: 5
        at java.base/java.lang.StringLatin1.charAt(StringLatin1.java:47)
        at java.base/java.lang.String.charAt(String.java:693)
        at Demo.main(Demo.java:8)

Q4

class A{
    public void mA(){}
}

public class Demo {
    public static void main(String[] args) {
        A a1 = null;

        System.out.println("Start Main");
        a1.mA();
        System.out.println("End Main");
    }    
}

Start Main
Exception in thread "main" java.lang.NullPointerException
        at Demo.main(Demo.java:10)

Q5

class A{
    public void mA(){}
}

class B extends A{}

public class Demo {
    public static void main(String[] args) {
        A a1 = new A();
        B b1;

        System.out.println("Start Main");
        b1 = (B) a1;
        System.out.println("End Main");
    }    
}

Start Main
Exception in thread "main" java.lang.ClassCastException: class A cannot be cast to class B (A and B are in unnamed module of loader 'app')
        at Demo.main(Demo.java:13)

Q6

public class Demo {
    public static void main(String[] args) {
        double a = 24, b = 0, c;

        System.out.println("Start Main");
        c = a/b; 
        System.out.println("c = "+c);
        System.out.println("End Main");
    }    
}

Start Main
c = Infinity
End Main

Q7

public class Demo {
    public static void main(String[] args) {
        int a = 24, b = 0, c;
        System.out.println("Start Main");
        try{
            c = a/b;
        }catch(ArithmeticException ex){
            c = -1;
        }
        System.out.println("24/0 = " + c);
        System.out.println("End Main");
    }    
}

Start Main
24/0 = -1
End Main

Q8

public class Demo {
    public static void main(String[] args) {
        int a = 3, b = 0, c;
        int[] ar = new int[3];
        System.out.println("Start Main");
        try {
            ar[a] = 100;    
        } catch (ArrayIndexOutOfBoundsException e) {
            ar = new int[a+1];
        }        
        System.out.println("End Main");
    }    
}

Q9

public class Demo {
    public static void main(String[] args) {
        int a = 5;
        String name = "kamal";
        char ch;
        
        System.out.println("Start Main");
        try {
            ch = name.charAt(a);
        } catch (StringIndexOutOfBoundsException e) {
            ch = '\0';
        }
        
        System.out.println("End Main");
    }    
}

Q10

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
    String sNum1 = textFieldNumber1.getText();
    String sNum2 = textFieldNumber2.getText();
    
    int num1;
    int num2;
    try{
        num1 = Integer.parseInt(sNum1);
        num2 = Integer.parseInt(sNum2);
    }catch(NumberFormatException ex){
        num1 = 0;
        num2 = 0; 
    }
    
    int result;
    
    try {
        result = num1 / num2;
    } catch (ArithmeticException ex) {
        result = 0;
    }
    labelResult.setText(String.valueOf(result));        
}

Q11

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String sNum1 = textFieldNumber1.getText();
        String sNum2 = textFieldNumber2.getText();
        
        int num1;
        int num2;
        try{
            num1 = Integer.parseInt(sNum1);
            num2 = Integer.parseInt(sNum2);
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Invalid Number...");
            textFieldNumber1.setText("");
            textFieldNumber2.setText("");
            return;
        }
        
        int result;
        
        try {
            result = num1 / num2;
        } catch (ArithmeticException ex) {
            result = 0;
            return;
        }
        labelResult.setText(String.valueOf(result));        
    }                                        

Q12

public class Demo {
    public static void main(String[] args) {
        int a = 24, b = 0, c;
        System.out.println("Start Main");
        try{
            b = 10;
            c = a/b;
            System.out.println("try block");
        }catch(ArithmeticException ex){
            System.out.println("catch block");
        }
        System.out.println("End Main");
    }    
}

Q13

public class Demo {
    public static void main(String[] args) {
        int a = 24, b = 0, c;
        System.out.println("Start Main");
        try{
            c = a/b;
            System.out.println("try block");
        }catch(ArithmeticException ex){
            System.out.println("catch block");
        }
        //System.out.println("24/0 = " + c);
        System.out.println("End Main");
    }    
}

Q14

public class Demo {
    public static void main(String[] args) {
        int a = 24, b = 0, c;
        System.out.println("Start Main");
        try{
            c = a/b; // --> throws ArithmeticException
            System.out.println("try block");
        }catch(ArithmeticException ex){ //ClassCastException
            System.out.println("catch block");
        }
        System.out.println("End Main");
    }    
}

Q15

public class Demo {
    public static void main(String[] args) {
        int a = 24, b = 0, c;
        System.out.println("Start Main");
        try{
            c = a/b; // --> throws ArithmeticException
            System.out.println("try block");
        }catch(/*Insert code here*/){ 
            System.out.println("catch block");
        }
        System.out.println("End Main");
    }    
}

//A. ArithmeticException ex
//B. RuntimeException ex
//C. Exception ex
//D. Throwable ex
//E. Object ex --> Illegal

Q16

public class Demo {
    public static void method1(){
        int x = 24/0;
    }
    public static void method2(){
        method1();
    }
    public static void method3(){
        method2();
    }

    public static void main(String[] args) {
        System.out.println("Start Main");
        method3();
        System.out.println("End Main");
    }    
}

Start Main
Exception in thread "main" java.lang.ArithmeticException: / by zero
        at Demo.method1(Demo.java:3)
        at Demo.method2(Demo.java:6)
        at Demo.method3(Demo.java:9)
        at Demo.main(Demo.java:14)

Q17

public class Demo {
    public static void method1(){
        System.out.println("Start method1");
        int x = 24/0;
        System.out.println("End method1");
    }
    public static void method2(){
        System.out.println("Start method2");
        try {
            method1();
        } catch (Exception e) {
            
        }
        System.out.println("End method2");
    }
    public static void method3(){
        System.out.println("Start method3");
        method2();
        System.out.println("End method3");
    }

    public static void main(String[] args) {
        System.out.println("Start Main");
        method3();
        System.out.println("End Main");
    }    
}

Start Main
Start method3
Start method2
Start method1
End method2
End method3
End Main

Q18

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try{
            System.out.println("Start outer try...");
            char ch = name.charAt(6);
            try{
                System.out.println("Start inner try...");
                int b = 24/a;
            }catch (ArithmeticException ex){
                System.out.println("inside inner catch...");
            }
            System.out.println("End outer try...");
        }catch(RuntimeException ex){
            System.out.println("inside outer catch...");
        }
        
    }    
}

Q19

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try{
            System.out.println("Start outer try...");
            try{
                System.out.println("Start inner try...");
                int b = 24/a;
            }catch (ArithmeticException ex){
                System.out.println("inside inner catch...");
            }
            System.out.println("End outer try...");
        }catch(RuntimeException ex){
            System.out.println("inside outer catch...");
        }
        
    }    
}

Start outer try...
Start inner try...
inside inner catch...
End outer try...

Q20

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try{
            System.out.println("Start outer try...");
            try{
                System.out.println("Start inner try...");
                int b = 24/a;
            }catch (ClassCastException ex){
                System.out.println("inside inner catch...");
            }
            System.out.println("End outer try...");
        }catch(RuntimeException ex){
            System.out.println("inside outer catch...");
        }        
    }    
}

Start outer try...
Start inner try...
inside outer catch...

Q21

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()]= name.charAt(6)/a;
        } catch (StringIndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
        }
 
    }    
}

String index out of range: 6

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()]= name.charAt(5)/a;
        } catch (StringIndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
        }
        System.out.println("End main");
    }    
}

Exception in thread "main" java.lang.ArithmeticException: / by zero
        at Demo.main(Demo.java:8)


Q22

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()]= name.charAt(5)/a;
        } catch (RuntimeException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
        System.out.println("End main");
    }    
}

/ by zero
java.lang.ArithmeticException: / by zero
        at Demo.main(Demo.java:8)
End main

Q23

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()]= name.charAt(5)/a;
        } catch (StringIndexOutOfBoundsException ex) {
            System.out.println("String Index Error");
            ex.printStackTrace();
        }catch(ArithmeticException ex){
            System.out.println("Arithmetic Error");
        }catch(ArrayIndexOutOfBoundsException ex){
            System.out.println("Array Index Out Error");
        }
        System.out.println("End main");
    }    
}

Q24

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()] = name.charAt(5) / a;
        } catch (StringIndexOutOfBoundsException ex) {
            System.out.println("String Index Error");
            ex.printStackTrace();
        } 
        int max = 4;
        catch (ArithmeticException ex) {//Illegal, catch ladder should be continuous
            System.out.println("Arithmetic Error");
        } catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println("Array Index Out Error");
        }
        System.out.println("End main");
    }
}

Q25

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()] = name.charAt(5) / a;
        } catch (StringIndexOutOfBoundsException ex) {
            System.out.println("String Index Error");
            ex.printStackTrace();
        } catch (RuntimeException ex) {//Illegal
            System.out.println("Arithmetic Error");
        } catch (ArrayIndexOutOfBoundsException ex) {//Illegal since unreachable
            System.out.println("Array Index Out Error");
        }
        System.out.println("End main");
    }
}

Q26

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()] = name.charAt(5) / a;
        } catch (StringIndexOutOfBoundsException ex) {
            System.out.println("String Index Error");
            ex.printStackTrace();
        } catch (ArithmeticException ex) {//Illegal
            System.out.println("Arithmetic Error");
        } catch (ArrayIndexOutOfBoundsException ex) {//Illegal since unreachable
            System.out.println("Array Index Out Error");
        }catch(RuntimeException ex){
            System.out.println("Any Runtime Error");
        } catch(Exception ex){
            System.out.println("Any Exception");
        }
        System.out.println("End main");
    }
}

Q27

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()] = name.charAt(5) / a;
        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException ex) {// If same code has to be run for both exceptions
            System.out.println("Index Error");
            ex.printStackTrace();
        } catch (ArithmeticException ex) {// Illegal
            System.out.println("Arithmetic Error");
        } catch (RuntimeException ex) {
            System.out.println("Any Runtime Error");
        } catch (Exception ex) {
            System.out.println("Any Exception");
        }
        System.out.println("End main");
    }
}

Q28

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[name.length()] = name.charAt(5) / a;
        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException ex) {
            System.out.println("Index Error");
            ex.printStackTrace();
        } catch (ArithmeticException ex) {// Illegal
            System.out.println("Arithmetic Error");
        } catch (RuntimeException ex) {
            System.out.println("Any Runtime Error");
        } catch (Exception ex) {
            System.out.println("Any Exception");
        }finally{
            System.out.println("finally");// executed for any exception occur
        }
        System.out.println("End main");
    }
}

Q29

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            //ar[name.length()] = name.charAt(5) / a;
        } catch (StringIndexOutOfBoundsException | ArrayIndexOutOfBoundsException ex) {
            System.out.println("Index Error");
            ex.printStackTrace();
        } catch (ArithmeticException ex) {// Illegal
            System.out.println("Arithmetic Error");
        } catch (RuntimeException ex) {
            System.out.println("Any Runtime Error");
        } catch (Exception ex) {
            System.out.println("Any Exception");
        }finally{
            System.out.println("finally");//executed even if no exception occur
        }
        System.out.println("End main");
    }
}

Q30

public class Demo {
    public static void main(String[] args) {
        String name = "Niroth";
        int a = 0;
        int[] ar = new int[6];

        try {
            ar[6] = 100; //throws ArrayIndexOutOfBoundsException
        } catch (StringIndexOutOfBoundsException ex) {
            System.out.println("Index Error");
            ex.printStackTrace();
        } catch (ArithmeticException ex) {// Illegal
            System.out.println("Arithmetic Error");
        } finally{
            System.out.println("finally");
        }
        System.out.println("End main");
    }
}

Q31

public class Demo {
    public static boolean updateCustomer(){
        //Read customer detail
        //Process Data
        //Update customer detail
        return true;
        System.out.println("Update Sucess...");// Illegal , unreachable code
    }

    public static void main(String[] args) {
        
    }
}

Q32

public class Demo {
    public static boolean updateCustomer() {
        try {
            // Read customer detail
            // Process Data
            // Update customer detail
            return true;
        } finally {
            System.out.println("Update Sucess...");
        }
    }

    public static void main(String[] args) {
        updateCustomer();
    }
}

Q33

public class Demo {
    public static void calculate(int num1, int num2) throws ArithmeticException{

    }

    public static void main(String[] args) {
        try{
            calculate(100,50);
        }catch(ArithmeticException ex){

        }
    }
}

Q34

public class Demo {
    public static void calculate(int num1, int num2) throws ClassNotFoundException{

    }

    public static void main(String[] args) {
        calculate(100,50);// Illegal, need to handle ClassNotFoundException using try-catch block
        //but ClassNotFoundException is a compile time checked exception so no need to handle
    }
}

Q35

public class Demo {
    public static void calculate(int num1, int num2) throws ClassNotFoundException{

    }

    public static void main(String[] args) {
        try {
            calculate(100,50);
            //but ClassNotFoundException is a compile time checked exception so no need to handle
        } catch (Exception e) {
        
        }
    }
}

Q36

import java.io.*;
class Demo{ 
	public static boolean addStudent(Student student){
		FileWriter fw=new FileWriter("Student.txt",true);
		fw.write(student.toString()+"\n"); //student.getId()+","+student.getName()+","+....
		fw.close();
		return true;
	}
	public static void main(String args[]){ 
		
	} 
}

//public FileWriter(String fileName)
           throws IOException

Q37

import java.io.FileWriter;
import java.io.IOException;

public class Demo {
    public static boolean addStudent(Student student){
		FileWriter fw=new FileWriter("Student.txt",true);//throws IOException
		fw.write(student.toString()+"\n"); //write(String) -> throws IOException
		fw.close();//throws IOException
		return true;
	}


    public static void main(String[] args) {
        
    }
}

Q38

import java.io.FileWriter;
import java.io.IOException;

public class Demo {
    public static boolean addStudent(Student student) {
        try {
            FileWriter fw = new FileWriter("Student.txt", true);// throws IOException
            fw.write(student.toString() + "\n"); // write(String) -> throws IOException
            fw.close();//throws IOException
        } catch (IOException  e) {
            
        }
        return true;
    }

    public static void main(String[] args) {

    }
}

Q39

import java.io.FileWriter;
import java.io.IOException;

public class Demo {
    public static boolean addStudent(Student student) {
        FileWriter fw = new FileWriter("Student.txt", true);// throws IOException
        fw.write(student.toString() + "\n"); // write(String) -> throws IOException
        fw.close();//throws IOException
        return true;
    }

    public static void main(String[] args) {
        addStudent(null);// throws IOException
    }
}

Q40

import java.io.FileWriter;
import java.io.IOException;

class Demo{ 
	public static boolean addStudent(Student student)throws IOException{
		FileWriter fw=new FileWriter("Student.txt",true); //throws IOException
		fw.write(student.toString()+"\n"); //write(String)->throws IOException
		fw.close(); //throws IOException
		return true;
	}

	public static void main(String args[]){ 
		try{
			addStudent(null); //throws IOException
		}catch(IOException ex){
			//
		}
	} 
}

Q41

import java.io.FileNotFoundException;

class Vehicle{
    public void park(){

    }
}

class Car extends Vehicle{
    @Override
    public void park() throws FileNotFoundException{//Illegal, when overriding a super class method in subclass; 
        //subclass cannot have exception which is not declared for the super class method 
        
    }
}

public class Demo {
    public static void main(String[] args) {
        
    }
}

Q42

import java.io.FileNotFoundException;

class Vehicle{
    public void park() throws FileNotFoundException{

    }
}

class Car extends Vehicle{
    @Override
    public void park() throws FileNotFoundException{
    }
}

public class Demo {
    public static void main(String[] args) {
        
    }
}

Q43

import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;

class Vehicle{
    public void park() throws IOException{

    }
}

class Car extends Vehicle{
    @Override
    public void park() /*insert code here*/{
    }
}
//A. throws IOException //Legal
//B. throws FileNotFoundException //Legal (FileNotFoundException class is a sub class of IOException)
//C. throws EOFException //Legal (EOFException class is a sub class of IOException)
//D. throws Nothing //Legal
//E. throws ClassNotFoundException //Illegal (not a subclass of IOException)
//F. throws SQLException //Illegal (not a subclass of IOException)
//G. throws RuntimeException //Legal, RuntimeException class is a compile time unchecked exception

public class Demo {
    public static void main(String[] args) {
        
    }
}

Q44

public class Demo {
    public static void main(String[] args) {
        ArithmeticException ob = new ArithmeticException("message");
        throw ob;
    }    
}

Q45

public class Demo {
    public static void main(String[] args) {
        Exception ob = new ArithmeticException("message");
        throw ob; //Illegal, Exception is compile time checked
    }    
}

Q46

class CompileTimeUncheckedException extends RuntimeException{// to create compile time unchecked exception class

}

class CompileTimeCheckedException extends Exception{ // to create compile time checked exception class

}

public class Demo {
    public static void main(String[] args) {
        
    }    
}





















